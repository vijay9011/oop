import java.util.Arrays;

class Room implements Comparable<Room> {
    private double width;
    private double length;
    private int floor;
    public Room() {
        this.width = 10;
        this.length = 12.5;
        this.floor = 1;
    }
    public Room(double width, double length, int floor) {
        setLength(Math.max(width, length));
        setWidth(Math.min(width, length));
        this.floor = floor;
    }
    public double getWidth() {
        return width;
    }

    public double getLength() {
        return length;
    }

    public int getFloor() {
        return floor;
    }
    public void setWidth(double width) {
        if (width > 0) {
            this.width = width;
        }
    }

    public void setLength(double length) {
        if (length > 0) {
            this.length = length;
        }
    }

    public void setFloor(int floor) {
        this.floor = floor;
    }
    @Override
    public String toString() {
        return length + " x " + width + ", floor " + floor;
    }
    @Override
    public int compareTo(Room other) {
        if (this.floor != other.floor) {
            return this.floor - other.floor;
        } else if (this.length != other.length) {
            return Double.compare(this.length, other.length);
        } else {
            return Double.compare(this.width, other.width);
        }
    }
}

class Classroom extends Room {
    private int numStudents;
    public Classroom(double width, double length, int floor, int numStudents) {
        super(width, length, floor);
        this.numStudents = numStudents;
    }
    public int getNumStudents() {
        return numStudents;
    }
    public void setNumStudents(int numStudents) {
        this.numStudents = numStudents;
    }
    @Override
    public String toString() {
        return super.toString() + ", capacity = " + numStudents + " students";
    }
}
public class RoomTest {
    public static void main(String[] args) {
        Room[] rooms = {
            new Room(15, 10, 2),
            new Room(10, 12.5, 1),
            new Classroom(20, 15, 3, 30),
            new Classroom(25, 20, 1, 25),
            new Room(8, 8, 2)
        };
        Arrays.sort(rooms);
        for (Room room : rooms) {
            System.out.println(room);
        }
        Room[] classrooms = filterClassrooms(rooms);
        System.out.println("\nClassrooms:");
        for (Room room : classrooms) {
            System.out.println(room);
        }
    }
    public static Classroom[] filterClassrooms(Room[] rooms) {
        return Arrays.stream(rooms)
                     .filter(room -> room instanceof Classroom)
                     .toArray(Classroom[]::new);
    }
}
